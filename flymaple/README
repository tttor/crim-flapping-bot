------------------------------------------------------------------------------
Wiring notes:
1) USART1 (COM1) -> GPS
2) USART2 -> Maestro servo controller
3) USART3 -> XBee
4) TIMER3 (at D28, D12) -> PWM motors
5) TIMER2 -> GPS.read()
6) D31, D32, D33, D34, D35, D36, D37, D26 -> 8-channel RC
7) D27, D11, D24, D14 -> direction-signal motors

------------------------------------------------------------------------------
For crim-flapping-bot _only:
0) We use the libmaple version 2010
1) install gcc-arm-none-eabi-latest-linux32, e.g. to /opt/arm/bin
if you are running 64-bit Ubuntu, then you have to run: $ sudo apt-get install ia32-libs
2) modify /ets/sudoers to include
Defaults  secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/arm/bin"
where /opt/arm/ is where you installed gcc-arm-none-eabi-latest-linux32
This is to include gcc-arm-none-eabi-latest-linux32 installation path to the sudo's $PATH.
Notice that this is not the user's $PATH that may not be included in the sudo's $PATH.
3) may need to upgrade dfu-util to vertion 0.7
4) sometimes, we have to practice the perpetual boot mode :)
5) do all build processes with sudo, i.e.
$ sudo make clean
$ sudo make
$ sudo make install

actually, you can run $ make (assuming you have set $PATH to include where you installed gcc-arm-none-eabi-latest-linux32), but when you run $ make install, you likely get:

Filter on vendor = 0x1eaf product = 0x0003
Cannot open device
Opening DFU USB device... make: *** [install] Error 1

Then, the solution is to $ sudo make install that creates some sudo's file so if you $ make clean, you get:

$ make clean
rm -rf build
rm: cannot remove build/wirish/boards/maple/board.o': Permission denied
rm: cannot removebuild/wirish/boards/maple/board.d': Permission denied
make: *** [clean] Error 1

Therefore, it is recommended to use sudo for each step ;)

6) the main (hot) file: ./main.cpp is ignored by git

Reference:
http://leaflabs.com/docs/unix-toolchain.html
http://leaflabs.com/docs/index.html
------------------------------------------------------------------------------
                   _ _ _                           _
                  | (_) |__  _ __ ___   __ _ _ __ | | ___
                  | | | '_ \| '_ ` _ \ / _` | '_ \| |/ _ \
                  | | | |_) | | | | | | (_| | |_) | |  __/
                  |_|_|_.__/|_| |_| |_|\__,_| .__/|_|\___|
                                            |_|               by LeafLabs!
                                                              leaflabs.com


The latest version of this repository can be found here:

    https://github.com/leaflabs/libmaple

IMPORTANT: read HACKING _before_ submitting patches.

General information
------------------------------------------------------------------------------

libmaple is a library for programming ST's STM32 line of Cortex M3
microcontrollers.  It has a pure C layer, libmaple proper, which does
most of the work, and a C++ layer, Wirish, which provides high-level
convenience functions and a Wiring/Arduino-compatible interface.

libmaple is designed for portability, and currently runs on a variety
of STM32F1 performance and value line MCUs, with experimental support
for STM32F2 MCUs.

Using libmaple
------------------------------------------------------------------------------

The easiest way to use libmaple is in concert with the Maple IDE.
Maple IDE, a sister project from LeafLabs, is an Arduino IDE fork
usable for programming Maple boards, which includes libmaple and a
compilation and upload toolchain:

    http://leaflabs.com/docs/maple-ide-install.html

Additionally, a HOWTO on setting up this library for use from the
command line in a Unix environment is available here:

    http://leaflabs.com/docs/unix-toolchain.html

Documentation, Etc.
------------------------------------------------------------------------------

HTML documentation for the latest release of libmaple/Maple IDE is
available here:

    http://leaflabs.com/docs/

libmaple is well documented via Doxygen comments.  The HTML
documentation referenced above (which also includes the Doxygen
output) is automatically generated from the source files in the
leaflabs-docs repository.  In order to obtain the leaflabs-docs
repository, visit:

    http://github.com/leaflabs/leaflabs-docs/

Repository Layout
------------------------------------------------------------------------------

/build/

    Compiler output

/contrib/

    Community-contributed resources.  LeafLabs doesn't maintain the
    contents of this directory, so it may get stale.

/examples/

    Example code and test programs. Copy these to /main.cpp to compile them.

/libmaple/

    This is the meat of the library.  C only, no C++.  The
    Arduino-like compatibility layer (in C++) is in /wirish/.

/libraries/

    Special-purpose libraries that don't merit inclusion in the
    /libmaple/ and /wirish/ directories, which are intended for
    general use.  Arduino-compatible libraries go here.

/LICENSE

    Licensing and copyright information.

/main.cpp.example

    main.cpp is required for a successful build but is non-existent by
    default; use this file as a template for building your program. By
    default, just blinks an LED.

/Makefile

    libmaple build instructions for GNU Make. (This is supplemented by
    build-targets.mk, the rules.mk files throughout the tree, and the
    files in support/make/).

/notes/

    Unstructured text notes that may be useful.

/README

    This file ;).

/support/

    Support files and scripts for various purposes.

    gdb/              GDB scripts.
    ld/               Linker scripts.
    make/             Additional files used by the top-level Makefile.
    scripts/          Miscellany.
    doxygen/          Doxygen configuration.
    stm32loader.py    Upload script for the STM32's built-in USART bootloader.

/wirish/

    Extra wrappers and functionality around the lower level code in
    /libmaple/. These files implement an Arduino "Wiring"-like
    library.
